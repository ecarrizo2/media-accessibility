name: Release on Merge to Main

on:
  push:
    branches:
      - main  # Trigger only on merges to the main branch

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Allow creating releases and tagging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags and commits are fetched

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Conventional Changelog Angular and Tools
        run: |
          npm install --save-dev conventional-changelog-angular
          npm install --save-dev conventional-recommended-bump
          npm install --save-dev conventional-changelog-cli

      - name: Determine new version
        id: version
        run: |
          # Fetch all tags to ensure git describe works
          git fetch --tags

          # Get the current version from the last Git tag (v1.2.3)
          current_version=$(git describe --tags --abbrev=0 || echo "v0.0.0")

          # Strip the "v" prefix if present
          current_version=${current_version#v}

          # Run the version bump tool with the Angular preset
          bump_type=$(npx conventional-recommended-bump -p conventional-changelog-angular)

          # Use npm's semver tool to calculate the new version based on the bump type
          new_version=$(npx semver "$current_version" -i "$bump_type")

          # Set the new version as an environment variable
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Generate release notes using conventional-changelog-cli
        id: changelog
        run: |
          # Generate release notes without the --same-file flag
          release_notes=$(npx conventional-changelog -p angular -s -r 0)

          # Format the release notes to include PR links and contributors
          formatted_release_notes="## What's Changed\n\n"

          # Loop through the commits and add them to the release notes
          for commit in $(echo "$release_notes" | grep -oE ".*\([^)]+\):.*"); do
            # Extract commit hash (assuming commit hashes are included in the changelog)
            pr_link=$(git log --grep="$commit" --format='%s' | grep -oP '(?<=#)\d+')
            if [ "$pr_link" ]; then
              pr_url="https://github.com/${{ github.repository }}/pull/$pr_link"
              formatted_release_notes+="* $commit by $pr_url\n"
            else
              formatted_release_notes+="* $commit\n"
            fi
          done

          # Append contributor section at the end
          contributors=$(git log --pretty=format:"%aN" | sort -u | tr '\n' ', ' | sed 's/, $//')
          formatted_release_notes+="\n## Contributors\n\n$contributors"

          # Output the formatted release notes
          echo "release_notes=$formatted_release_notes" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.new_version }}"
          release_name: "Release v${{ env.new_version }}"
          body: ${{ env.release_notes }}  # Use the formatted release notes here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
