name: "Dependabot Auto-Approve and Handle Merge for Minor Bumps"

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  auto-approve-and-merge-queue:
    runs-on: ubuntu-latest

    steps:
      - name: Check Branch Protection Rules for Merge Queue
        id: check_merge_queue
        uses: actions/github-script@v6
        with:
          script: |
            const { GITHUB_TOKEN } = process.env;
            const octokit = github.getOctokit(GITHUB_TOKEN);

            // Get the repository branch protection rules
            const { data: protectionRules } = await octokit.repos.getBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main'
            });

            // Check if the merge queue is configured in the protection rules
            const hasMergeQueue = protectionRules.required_pull_request_reviews?.dismiss_stale_reviews ?? false;
            console.log(`Merge queue configured: ${hasMergeQueue}`);
            return hasMergeQueue; // This will return true or false based on the merge queue configuration
        env:
          GITHUB_TOKEN: ${{ secrets.TKWW_GITHUB_TOKEN }}

      - name: Check Dependabot PR and Approve
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.TKWW_GITHUB_TOKEN }}
          MERGE_QUEUE_CONFIGURED: ${{ steps.check_merge_queue.outputs.result }}
        with:
          script: |
            const { GITHUB_TOKEN, MERGE_QUEUE_CONFIGURED } = process.env;
            const octokit = github.getOctokit(GITHUB_TOKEN);
            const prNumber = context.payload.pull_request.number;

            // Get the pull request details
            const { data: pullRequest } = await octokit.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            if (pullRequest.user.login !== 'dependabot[bot]') {
              console.log('Not a Dependabot PR. Skipping...');
              return;
            }

            // Check if the PR title contains 'deps-dev' to confirm it's a dev-dependency update
            const isDevDependencyChange = pullRequest.title.includes('deps-dev');

            if (!isDevDependencyChange) {
              console.log('PR does not affect devDependencies. Skipping...');
              return;
            }

            // Extract version numbers from the PR title
            const versionRegex = /from (\d+\.\d+\.\d+) to (\d+\.\d+\.\d+)/;
            const match = pullRequest.title.match(versionRegex);

            if (match) {
              const oldVersion = match[1];
              const newVersion = match[2];

              // Split version numbers into major, minor, and patch parts
              const [oldMajor] = oldVersion.split('.');
              const [newMajor] = newVersion.split('.');

              // If the major version changes, it's a breaking change
              if (oldMajor !== newMajor) {
                console.log('Major version change detected. Skipping auto-merge...');
                return;
              }
            }

            // Approve the PR
            await octokit.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE',
              body: 'Auto-approved by workflow for Dependabot PRs affecting devDependencies.',
            });

            const isMergeQueueConfigured = MERGE_QUEUE_CONFIGURED === 'true';

            if (isMergeQueueConfigured) {
              // Add to the merge queue if configured
              await octokit.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['merge-queue'],
              });
              console.log('Added to merge queue.');
            } else {
              // If merge queue is not configured, enable auto-merge
              await octokit.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash', // or 'merge' / 'rebase'
              });
              console.log('Auto-merge enabled.');
            }
